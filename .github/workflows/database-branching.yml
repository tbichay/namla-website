name: Database Branching

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  pull_request:
    types: [closed]

jobs:
  create-database-branch:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Neon Database Branch
        id: create-branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          parent: main
          branch_name: ${{ github.head_ref }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Set Environment Variables for Preview
        if: steps.create-branch.outputs.db_url
        run: |
          echo "DATABASE_URL=${{ steps.create-branch.outputs.db_url }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: npm ci

      - name: Run Database Migrations
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.db_url }}
        run: |
          npm run db:push

      - name: Comment PR with Database Info
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ github.head_ref }}';
            const dbUrl = '${{ steps.create-branch.outputs.db_url }}';
            const comment = `
            ## üóÑÔ∏è Database Branch Created
            
            **Branch**: \`${branchName}\`
            **Database**: Ready for preview deployment
            **Storage**: R2 folder \`branch-${branchName}/\`
            
            Your preview environment will use:
            - Isolated database branch with production data
            - Separate R2 storage folder for images
            - All changes are isolated from production
            
            The database branch will be automatically deleted when this PR is closed.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  delete-database-branch:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Database Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: ${{ github.head_ref }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Comment PR with Cleanup Info
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ github.head_ref }}';
            const comment = `
            ## üßπ Database Branch Cleaned Up
            
            The database branch \`${branchName}\` has been deleted.
            
            Note: R2 storage folder \`branch-${branchName}/\` may still contain files for debugging purposes.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  apply-production-migrations:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Apply Production Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npm run db:push

      - name: Notify Success
        run: |
          echo "‚úÖ Production database migrations applied successfully"